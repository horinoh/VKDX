#version 450
 
#extension GL_EXT_mesh_shader : require

#define MESHLET_COUNT 32

struct PAYLOAD_IN {
    uint MeshletIDs[MESHLET_COUNT];
	uint MeshletChunkID;
};
taskPayloadSharedEXT PAYLOAD_IN Payload;

layout (location = 0) out vec3 OutColor[];

struct VERTEX_IN
{
    vec3 Position;
};
struct MESHLET
{
    uint VertCount;
    uint VertOffset;
    uint PrimCount;
    uint PrimOffset;
};
layout(binding = 0, set = 0)  uniform samplerBuffer InVertices;
layout(binding = 1, set = 0)  uniform usamplerBuffer VertexIndices;
layout(binding = 2, set = 0) buffer Meshlet { MESHLET Meshlets[]; };
layout(binding = 3, set = 0) buffer Triangle { uint Triangles[]; };

uvec3 Unpack(uint tri)
{
    //!< uint32_t の 30bit を使用して i0, i1, i2 それぞれ 10bit
    return uvec3(tri & 0x3ff, (tri >> 10) & 0x3ff, (tri >> 20) & 0x3ff);
}
uint GetVertexIndex32(const uint i) 
{
    return texelFetch(VertexIndices, int(i)).x;
}
uint GetVertexIndex16(const uint i) 
{
    //!< 16bit の場合 uint に インデックスが 2 つ含まれるので i を 2 で割り、i が奇数なら 16bit シフトして取得している
    return (GetVertexIndex32(i >> 1) >> (16 * (i & 0x1))) & 0xffff;
}

const vec3 Colors[] = { 
    vec3(1.0f, 0.0f, 0.0f), vec3(0.0f, 1.0f, 0.0f), vec3(0.0f, 0.0f, 1.0f), vec3(1.0f, 1.0f, 0.0f), vec3(0.0f, 1.0f, 1.0f), vec3(1.0f, 0.0f, 1.0f), vec3(1.0f, 1.0f, 1.0f), vec3(0.0f, 0.0f, 0.0f),
};

const mat4 PV = mat4(1.93643117f, 0.0f, 0.0f, 0.0f,
							0.0f, 3.89474273f, 0.0f, 0.0f,
							0.0f, 0.0f, -1.00010002f, -1.0f,
							0.0f, 0.0f, 2.99029899f, 3.0f);

#define ITERATION_COUNT(Size, Unit) ((Size + (Unit - 1)) / Unit)

layout(local_size_x = 128, local_size_y = 1, local_size_z = 1) in;
layout(triangles, max_vertices = 128, max_primitives = 64) out;
void main()
{
    const uint MeshletID = Payload.MeshletIDs[gl_WorkGroupID.x];
    if (MeshletID >= 128) { return; }
    const MESHLET ML = Meshlets[Payload.MeshletChunkID * MESHLET_COUNT + MeshletID];

    SetMeshOutputsEXT(ML.VertCount, ML.PrimCount);

    if (ML.PrimCount > gl_LocalInvocationID.x) {
        gl_PrimitiveTriangleIndicesEXT[gl_LocalInvocationID.x] = Unpack(Triangles[ML.PrimOffset + gl_LocalInvocationID.x]);
    }

    if (ML.VertCount > gl_LocalInvocationID.x) {
        gl_MeshVerticesEXT[gl_LocalInvocationID.x].gl_Position = PV * vec4(texelFetch(InVertices, int(GetVertexIndex32(ML.VertOffset + gl_LocalInvocationID.x))).xyz, 1.0f);
        OutColor[gl_LocalInvocationID.x] = Colors[MeshletID % 8];
    }
}