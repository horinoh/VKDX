#version 450
 
#extension GL_NV_mesh_shader : require

taskNV in Task {
	uint InstanceID;
    uint MeshletDimension;
    uint MeshletIDs[32];
} Payload;

layout (location = 0) out vec3 OutColor[];

#define N 5
#define NN (N * N)
#define N1 (N - 1)
#define N1N1 (N1 * N1)

const vec3 Colors[] = { vec3(1.0f, 0.0f, 0.0f), vec3(0.0f, 1.0f, 0.0f), vec3(0.0f, 0.0f, 1.0f), vec3(1.0f, 1.0f, 0.0f), vec3(0.0f, 1.0f, 1.0f), vec3(1.0f, 0.0f, 1.0f), vec3(1.0f, 1.0f, 1.0f), vec3(0.0f, 0.0f, 0.0f) };

const float PI = 4.0f * atan(1.0f);
vec2 GetUV_Torus(const vec2 uv) 
{
	return fract(uv) * 2.0f * PI;
}
vec3 GetPosition_Torus(const vec2 uv)
{
	const vec2 UV = GetUV_Torus(uv);
	const vec2 R = vec2(0.5f, 1.0f);
	return vec3((R.y + R.x * cos(UV.y)) * cos(UV.x), (R.y + R.x * cos(UV.y)) * sin(UV.x), R.x * sin(UV.y));
}

layout(local_size_x = NN) in;
layout(triangles, max_vertices = NN, max_primitives = 2 * N1N1) out;
void main()
{
    uint IndexCount = 0;
	gl_PrimitiveCountNV = 2 * N1N1;
    for (uint i = 0; i < N1; ++i)
    {
        for (uint j = 0; j < N1; ++j)
        {
            const uint LT = i * N + j;
            const uint RT = LT + 1;
            const uint LB = LT + N;
            const uint RB = LB + 1;
            gl_PrimitiveIndicesNV[IndexCount++] = LT; gl_PrimitiveIndicesNV[IndexCount++] = LB; gl_PrimitiveIndicesNV[IndexCount++] = RT;
            gl_PrimitiveIndicesNV[IndexCount++] = LB; gl_PrimitiveIndicesNV[IndexCount++] = RB; gl_PrimitiveIndicesNV[IndexCount++] = RT;
        }
    }

    const uint MeshletID = Payload.MeshletIDs[gl_WorkGroupID.x];

    const vec2 MeshletScale = vec2(1.0f, 1.0f) / Payload.MeshletDimension;
    const vec2 MeshletOffset = vec2(float(MeshletID % Payload.MeshletDimension), float(MeshletID / Payload.MeshletDimension)) * MeshletScale;

    const vec2 UV = vec2(float(gl_LocalInvocationID.x % N) / N1, 1.0f - float(gl_LocalInvocationID.x / N) / N1);
#if 1
    const vec3 InstanceOffset = vec3(float(Payload.InstanceID % 4) / 3 -0.5f, float(Payload.InstanceID / 4) / 3 - 0.5f, 0.0f);
	gl_MeshVerticesNV[gl_LocalInvocationID.x].gl_Position = vec4(GetPosition_Torus(UV * MeshletScale + MeshletOffset) * 0.1f + InstanceOffset, 1.0f);
#else
	gl_MeshVerticesNV[gl_LocalInvocationID.x].gl_Position = vec4(UV * MeshletScale + MeshletOffset, 0.0f, 1.0f); 
#endif

	OutColor[gl_LocalInvocationID.x] = Colors[MeshletID % 8];  
}