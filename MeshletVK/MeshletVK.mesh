#version 450
 
#extension GL_NV_mesh_shader : require

taskNV in Task {
  uint MeshletIDs[32];
} Payload;

layout (location = 0) out vec3 OutColor[];

#define N 4
#define NN (N * N)
#define N1 (N - 1)
#define N1N1 (N1 * N1)

const vec3 Colors[] = { vec3(1.0f, 0.0f, 0.0f), vec3(0.0f, 1.0f, 0.0f), vec3(0.0f, 0.0f, 1.0f), vec3(1.0f, 1.0f, 0.0f), vec3(0.0f, 1.0f, 1.0f), vec3(1.0f, 0.0f, 1.0f), vec3(1.0f, 1.0f, 1.0f), vec3(0.0f, 0.0f, 0.0f) };

layout(local_size_x = NN) in;
layout(triangles, max_vertices = NN, max_primitives = 2 * N1N1) out;
void main()
{
    uint IndexCount = 0;
	gl_PrimitiveCountNV = 2 * N1N1;
    for (uint i = 0; i < N1; ++i)
    {
        for (uint j = 0; j < N1; ++j)
        {
            const uint LT = i * N + j;
            const uint RT = LT + 1;
            const uint LB = LT + N;
            const uint RB = LB + 1;
            gl_PrimitiveIndicesNV[IndexCount++] = LT; gl_PrimitiveIndicesNV[IndexCount++] = LB; gl_PrimitiveIndicesNV[IndexCount++] = RT;
            gl_PrimitiveIndicesNV[IndexCount++] = LB; gl_PrimitiveIndicesNV[IndexCount++] = RB; gl_PrimitiveIndicesNV[IndexCount++] = RT;
        }
    }

    const uint MeshletID = Payload.MeshletIDs[gl_WorkGroupID.x];

    const uint m = uint(sqrt(gl_WorkGroupSize.x));
#if 1
    const vec2 Scale = vec2(1.0f, 1.0f) / m;
    const vec2 Offset = vec2(float(MeshletID % m), float(MeshletID / m)) * Scale;
#else
    const vec2 Scale = vec2(2.0f, 2.0f) / m;
    const vec2 Offset = vec2(float(MeshletID % m) - 2.0f, 1.0f - float(MeshletID / m)) * Scale;
#endif

    const uvec2 Coord = uvec2(gl_LocalInvocationID.x % N, gl_LocalInvocationID.x / N);
	gl_MeshVerticesNV[gl_LocalInvocationID.x].gl_Position = vec4(vec2(float(Coord.x) / N1, 1.0f - float(Coord.y) / N1) * Scale + Offset, 0.0f, 1.0f); 

	OutColor[gl_LocalInvocationID.x] = Colors[MeshletID % 8];  
}