#pragma once

//VK_OBJECT_TYPE_INSTANCE,
//VK_OBJECT_TYPE_PHYSICAL_DEVICE,
//VK_OBJECT_TYPE_DEVICE,
//VK_OBJECT_TYPE_QUEUE,
//VK_OBJECT_TYPE_SEMAPHORE,
//VK_OBJECT_TYPE_COMMAND_BUFFER,
//VK_OBJECT_TYPE_FENCE,
//VK_OBJECT_TYPE_DEVICE_MEMORY,
//VK_OBJECT_TYPE_IMAGE,
//VK_OBJECT_TYPE_EVENT,
//VK_OBJECT_TYPE_QUERY_POOL,
//VK_OBJECT_TYPE_IMAGE_VIEW,
//VK_OBJECT_TYPE_SHADER_MODULE,
//VK_OBJECT_TYPE_PIPELINE_CACHE,
//VK_OBJECT_TYPE_PIPELINE_LAYOUT,
//VK_OBJECT_TYPE_RENDER_PASS,
//VK_OBJECT_TYPE_PIPELINE,
//VK_OBJECT_TYPE_DESCRIPTOR_SET_LAYOUT,
//VK_OBJECT_TYPE_SAMPLER,
//VK_OBJECT_TYPE_DESCRIPTOR_POOL,
//VK_OBJECT_TYPE_DESCRIPTOR_SET,
//VK_OBJECT_TYPE_FRAMEBUFFER,
//VK_OBJECT_TYPE_COMMAND_POOL,
//VK_OBJECT_TYPE_SAMPLER_YCBCR_CONVERSION,
//VK_OBJECT_TYPE_DESCRIPTOR_UPDATE_TEMPLATE,
//VK_OBJECT_TYPE_PRIVATE_DATA_SLOT,
//VK_OBJECT_TYPE_SURFACE_KHR,
//VK_OBJECT_TYPE_DISPLAY_KHR,
//VK_OBJECT_TYPE_DISPLAY_MODE_KHR,
//VK_OBJECT_TYPE_DEBUG_REPORT_CALLBACK_EXT,
//VK_OBJECT_TYPE_VIDEO_SESSION_KHR,
//VK_OBJECT_TYPE_VIDEO_SESSION_PARAMETERS_KHR,
//VK_OBJECT_TYPE_CU_MODULE_NVX,
//VK_OBJECT_TYPE_CU_FUNCTION_NVX,
//VK_OBJECT_TYPE_DEBUG_UTILS_MESSENGER_EXT,
//VK_OBJECT_TYPE_ACCELERATION_STRUCTURE_KHR,
//VK_OBJECT_TYPE_VALIDATION_CACHE_EXT,
//VK_OBJECT_TYPE_ACCELERATION_STRUCTURE_NV,
//VK_OBJECT_TYPE_PERFORMANCE_CONFIGURATION_INTEL,
//VK_OBJECT_TYPE_DEFERRED_OPERATION_KHR,
//VK_OBJECT_TYPE_INDIRECT_COMMANDS_LAYOUT_NV,
//VK_OBJECT_TYPE_BUFFER_COLLECTION_FUCHSIA,
//VK_OBJECT_TYPE_MICROMAP_EXT,
//VK_OBJECT_TYPE_OPTICAL_FLOW_SESSION_NV,
//VK_OBJECT_TYPE_SHADER_EXT,
//VK_OBJECT_TYPE_DESCRIPTOR_UPDATE_TEMPLATE_KHR,
//VK_OBJECT_TYPE_SAMPLER_YCBCR_CONVERSION_KHR,
//VK_OBJECT_TYPE_PRIVATE_DATA_SLOT_EXT,

//VK_OBJECT_TYPE_BUFFER
template<> void SetObjectName(VkDevice Device, VkBuffer Object, std::string_view Name) { SetObjectName(Device, VK_OBJECT_TYPE_BUFFER, reinterpret_cast<uint64_t>(Object), data(Name)); }
template<> void SetObjectTag(VkDevice Device, VkBuffer Object, const uint64_t TagName, const size_t TagSize, const void* TagData) { SetObjectTag(Device, VK_OBJECT_TYPE_BUFFER, reinterpret_cast<uint64_t>(Object), TagName, TagSize, TagData); }

//VK_OBJECT_TYPE_BUFFER_VIEW
template<> void SetObjectName(VkDevice Device, VkBufferView Object, std::string_view Name) { SetObjectName(Device, VK_OBJECT_TYPE_BUFFER_VIEW, reinterpret_cast<uint64_t>(Object), data(Name)); }
template<> void SetObjectTag(VkDevice Device, VkBufferView Object, const uint64_t TagName, const size_t TagSize, const void* TagData) { SetObjectTag(Device, VK_OBJECT_TYPE_BUFFER_VIEW, reinterpret_cast<uint64_t>(Object), TagName, TagSize, TagData); }

//VK_OBJECT_TYPE_SWAPCHAIN_KHR
template<> void SetObjectName(VkDevice Device, VkSwapchainKHR Object, std::string_view Name) { SetObjectName(Device, VK_OBJECT_TYPE_SWAPCHAIN_KHR, reinterpret_cast<uint64_t>(Object), data(Name)); }
template<> void SetObjectTag(VkDevice Device, VkSwapchainKHR Object, const uint64_t TagName, const size_t TagSize, const void* TagData) { SetObjectTag(Device, VK_OBJECT_TYPE_SWAPCHAIN_KHR, reinterpret_cast<uint64_t>(Object), TagName, TagSize, TagData); }
