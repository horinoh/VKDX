#version 460
#extension GL_EXT_ray_tracing : enable

struct AttrNT
{
    vec3 Normal;
    vec2 Texcoord;
};
hitAttributeEXT AttrNT Attr;

#define USE_DISTANCE_FUNCTION

#ifdef USE_DISTANCE_FUNCTION
//!< 距離関数 (DistanceFunction) https://iquilezles.org/articles/distfunctions/
float DFSphere(const vec3 Pos, const vec3 Center, const float Radius)
{
    return length(Pos - Center) - Radius;
}
vec3 DFSphereNormal(const vec3 Pos, const vec3 Center, const float Radius)
{
    const float Epsilon = 0.0001f;
    const vec3 Ex = vec3(Epsilon, 0.0f, 0.0f), Ey =vec3(0.0f, Epsilon, 0.0f), Ez = vec3(0.0f, 0.0f, Epsilon);
    return normalize(vec3(DFSphere(Pos + Ex, Center, Radius) - DFSphere(Pos - Ex, Center, Radius), DFSphere(Pos + Ey, Center, Radius) - DFSphere(Pos - Ey, Center, Radius), DFSphere(Pos + Ez, Center, Radius) - DFSphere(Pos - Ez, Center, Radius)));
}
float DFTorus(const vec3 Pos, const vec3 Center, const float Radius, const float Width)
{
    const vec3 d = Pos - Center;
    return length(vec2(length(d.xz) - Radius, d.y)) - Width;
}
vec3 DFTorusNormal(const vec3 Pos, const vec3 Center, const float Radius, const float Width)
{
    const float Epsilon = 0.0001f;
    const vec3 Ex = vec3(Epsilon, 0.0f, 0.0f), Ey = vec3(0.0f, Epsilon, 0.0f), Ez = vec3(0.0f, 0.0f, Epsilon);
    return normalize(vec3(DFTorus(Pos + Ex, Center, Radius, Width) - DFTorus(Pos - Ex, Center, Radius, Width), DFTorus(Pos + Ey, Center, Radius, Width) - DFTorus(Pos - Ey, Center, Radius, Width), DFTorus(Pos + Ez, Center, Radius, Width) - DFTorus(Pos - Ez, Center, Radius, Width)));
}
float DFBox(const vec3 Pos, const vec3 Center, const vec3 Radius)
{
    return length(max(abs(Pos - Center) - Radius, 0.0f));
}
vec3 DFBoxNormal(const vec3 Pos, const vec3 Center, const vec3 Radius)
{
    const float Epsilon = 0.0001f;
    const vec3 Ex = vec3(Epsilon, 0.0f, 0.0f), Ey = vec3(0.0f, Epsilon, 0.0f), Ez = vec3(0.0f, 0.0f, Epsilon);
    return normalize(vec3(DFBox(Pos + Ex, Center, Radius) - DFBox(Pos - Ex, Center, Radius), DFBox(Pos + Ey, Center, Radius) - DFBox(Pos - Ey, Center, Radius), DFBox(Pos + Ez, Center, Radius) - DFBox(Pos - Ez, Center, Radius)));
}

#else

bool Sphere(const vec3 Center, const float Radius, out float t)
{
	//!< レイのパラメータ表現 Ray = o + d * t ただし o = gl_ObjectRayOriginEXT, d = gl_ObjectRayDirectionEXT
    //!< (Ray - Center)^2 = Radius^2
    //!< (d * t + Tmp0)^2 = Radius^2 ただし Tmp0 = (o - Center)
    //!< d^2 * t^2 + 2 * Tmp0 * d * t + Tmp0^2 - Radius^2 = 0
    //!< A * t^2 + B * t + C = 0 ただし A = d^2, B = 2 * Tmp0 * d, C = Tmp0^2 - Radius^2
    //!< 判別式 D = B * B - 4.0f * A * C
    //!< 判別式 D4 = B2 * B2 - A * C ただし B2 = B / 2
    //!< 解の公式 t = (-B +- sqrt(D)) / 2 * A
    //!< 解の公式 t = (-B2 +- sqrt(D4)) / A
    
    const vec3 Tmp0 = gl_ObjectRayOriginEXT - Center;
    const vec3 d = gl_ObjectRayDirectionEXT;

    const float A = dot(d, d);
    const float B2 = dot(Tmp0, d);
    const float C = dot(Tmp0, Tmp0) - Radius * Radius;
    const float D4 = B2 * B2 - A * C;

	if(D4 >= 0.0f) {
        const float Sq = sqrt(D4);
        const float Tmp1 = (-B2 - Sq) / A;
        const float Tmp2 = (-B2 + Sq) / A;
        const float t0 = min(Tmp1, Tmp2);
        t = (t0 >= gl_RayTminEXT && t0 <= gl_RayTmaxEXT) ? t0 : max(Tmp1, Tmp2);
        if(t >= gl_RayTminEXT && t <= gl_RayTmaxEXT) {
            return true;
        }
	}
    return false;
}
void SphereNormal(const vec3 Center, const float t, out vec3 Normal)
{
    Normal = normalize((gl_ObjectRayOriginEXT + gl_ObjectRayDirectionEXT * t) - Center);
}
void SphereNormalTexcoord(const vec3 Center, const float t, out vec3 Normal, out vec2 Texcoord)
{
    SphereNormal(Center, t, Normal);
    const float PI = 4.0f * atan(1.0f);
    const float PI2 = PI * 2;
    Texcoord = vec2(fract(atan(Normal.y, Normal.x) / PI2), acos(-Normal.z) / PI);
}

bool AABB(const vec3 Center, const vec3 Radius, out float t)
{
    //!< レイのパラメータ表現 Ray = o + d * t ただし o = ObjectRayOrigin(), d = ObjectRayDirection()
    //!< Ray = Plane[+-X+-Y+-Z] ... レイに 6 平面を代入
    //!< o + d * t = Plane[+-X+-Y+-Z]
    //!< t = (Plane[+-X+-Y+-Z] - o) / d
    
    const vec3 AABBMin = Center - Radius;
    const vec3 AABBMax = Center + Radius;

    const vec3 invd = 1.0f / gl_ObjectRayDirectionEXT;
    const vec3 Tmp0 = (AABBMin - gl_ObjectRayOriginEXT) * invd;
    const vec3 Tmp1 = (AABBMax - gl_ObjectRayOriginEXT) * invd;
    const vec3 tMin = min(Tmp0, Tmp1);
    const vec3 tMax = max(Tmp0, Tmp1);
    const float t0 = max(max(tMin.x, tMin.y), tMin.z);
    const float t1 = min(min(tMax.x, tMax.y), tMax.z);
    if (t0 <= t1) {
        t = t0 < gl_RayTminEXT ? t1 : t0;
        if (t >= gl_RayTminEXT && t <= gl_RayTmaxEXT) {
            return true;
        }
    }
    return false;
}
void AABBNormal(const vec3 Center, const float t, out vec3 Normal)
{
    const vec3 N = normalize((gl_ObjectRayOriginEXT + gl_ObjectRayDirectionEXT * t) - Center);
    const vec3 NAbs = abs(N);
    const float MaxComp = max(max(NAbs.x, NAbs.y), NAbs.z);
    if (MaxComp == NAbs.x)
    {
        Normal = vec3(sign(N.x), 0.0f, 0.0f);
    }
    else if (MaxComp == NAbs.y)
    {
        Normal = vec3(0.0f, sign(N.y), 0.0f);
    }
    else
    {
        Normal = vec3(0.0f, 0.0f, sign(N.z));
    }
}
void AABBNormalTexcoord(const vec3 Center, const vec3 Radius, const float t, out vec3 Normal, out vec2 Texcoord)
{
    const vec3 Hit = gl_ObjectRayOriginEXT + gl_ObjectRayDirectionEXT * t;
    const vec3 N = normalize(Hit - Center);
    const vec3 NAbs = abs(N);
    const float MaxComp = max(max(NAbs.x, NAbs.y), NAbs.z);
    
    const vec3 AABBMin = Center - Radius;
    
    if (MaxComp == NAbs.x)
    {
        Normal = vec3(sign(N.x), 0.0f, 0.0f);
        Texcoord = (vec2(Normal.x, 1.0) * Hit.yz - AABBMin.yz) / Radius.yz;
    }
    else if (MaxComp == NAbs.y)
    {
        Normal = vec3(0.0f, sign(N.y), 0.0f);
        Texcoord = (vec2(-Normal.y, 1.0) * Hit.xz - AABBMin.xz) / Radius.xz;
    }
    else
    {
        Normal = vec3(0.0f, 0.0f, sign(N.z));
        Texcoord = (vec2(Normal.z, 1.0) * Hit.xy - AABBMin.xy) / Radius.xy;
    }
}
#endif

//!< ペイロードへ書き込みはできない、アトリビュートを生成して他シェーダへ供給
void main()
{
#ifdef USE_DISTANCE_FUNCTION
    const float Threshold = 0.0001f;
    const uint MaxSteps = 256;

    const vec3 Center = vec3(0.0f);
	const float Radius = 0.25f;

    uint i = 0;
    float t = gl_RayTminEXT;
    while(i++ < MaxSteps && t <= gl_RayTmaxEXT) {
        const vec3 Pos = gl_ObjectRayOriginEXT + t * gl_ObjectRayDirectionEXT;
        const float Distance = DFTorus(Pos, Center, Radius, Radius);
        if(Distance < Threshold) {
            Attr.Normal = DFTorusNormal(Pos, Center, Radius, Radius);

            const uint Kind = 0; //!< ここでは使用しないので 0
            reportIntersectionEXT(t, Kind);
            return;
        }
        t += Distance;
    }
#else
#if 1
   const vec3 Center = vec3(0.0f);
   const vec3 Radius = vec3(0.5f);
   float t;
   if(AABB(Center, Radius, t)) {
        AABBNormalTexcoord(Center, Radius, t, Attr.Normal, Attr.Texcoord);

        const uint Kind = 0; //!< ここでは使用しないので 0
        reportIntersectionEXT(t, Kind);
    }
#else    
    const vec3 Center = vec3(0.0f);
	const float Radius = 0.5f;
    float t;
    if(Sphere(Center, Radius, t)) {
        SphereNormalTexcoord(Center, t, Attr.Normal, Attr.Texcoord);

        const uint Kind = 0; //!< ここでは使用しないので 0
        reportIntersectionEXT(t, Kind);
    }
#endif
#endif
}