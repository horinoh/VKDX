#version 450
 
#extension GL_NV_mesh_shader : require

taskNV in Task {
    uint MeshletIDs[32];
} Payload;

layout (location = 0) out vec3 OutColor[];

struct VERTEX_IN
{
    vec3 Position;
};
struct MESHLET
{
    uint VertCount;
    uint VertOffset;
    uint PrimCount;
    uint PrimOffset;
};
layout(binding = 0, set = 0) buffer Vertex { VERTEX_IN Vertices[]; };
layout(binding = 1, set = 0) buffer Meshlet { MESHLET Meshlets[]; };
layout(binding = 2, set = 0) buffer VertexIndex { uint/*8*/ VertexIndices[]; }; // TODO
layout(binding = 3, set = 0) buffer Triangle { uint Triangles[]; };
uvec3 Unpack(uint tri)
{
    return uvec3(tri & 0x3ff, (tri >> 10) & 0x3ff, (tri >> 20) & 0x3ff);
}
uint GetVertexIndex32(const uint i) 
{
    return 0;//TODO
}
uint GetVertexIndex16(const uint i) 
{
    return (GetVertexIndex32(i >> 1) >> (16 * (i & 0x1))) & 0xffff;
}

const vec3 Colors[] = { vec3(1.0f, 0.0f, 0.0f), vec3(0.0f, 1.0f, 0.0f), vec3(0.0f, 0.0f, 1.0f), vec3(1.0f, 1.0f, 0.0f), vec3(0.0f, 1.0f, 1.0f), vec3(1.0f, 0.0f, 1.0f), vec3(1.0f, 1.0f, 1.0f), vec3(0.0f, 0.0f, 0.0f) };

layout(local_size_x = 32) in;
layout(triangles, max_vertices = 126, max_primitives = 64) out;
void main()
{
    const MESHLET ML = Meshlets[gl_WorkGroupID.x];
    const mat4 PVW = mat4(1.93643117f, 0.0f, 0.0f, 0.0f,
							0.0f, 3.89474273f, 0.0f, 0.0f,
							0.0f, 0.0f, -1.00010002f, -1.0f,
							0.0f, 0.0f, 2.99029899f, 3.0f);
	gl_MeshVerticesNV[gl_LocalInvocationID.x].gl_Position = PVW * vec4(Vertices[gl_LocalInvocationID.x].Position, 1.0f);
	OutColor[gl_LocalInvocationID.x] = Colors[gl_LocalInvocationID.x % 8];
}